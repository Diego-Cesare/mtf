#!/usr/bin/env python

import os
import shutil
import argparse
from pathlib import Path

line_char = "─"
sep_char = "│"

bg_white = "\33[47m"

black = "\33[30m"
red = "\033[31m"
green = "\33[32m"
yellow = "\33[33m"
blue = "\33[34m"
magenta = "\33[35m"
cyan = "\33[36m"
res = "\033[0m"


def colorize(color, text):
    return f"{color}{text}{res}"


def create_line(char=line_char):
    """Apenas cria uma linha horizontal com 70 caracteres"""
    print(char * 70)


def get_size(file):
    file_path = Path(file)
    size = file_path.stat().st_size
    return size / 1024


def enumerate_lines(file_name):
    """Exibe o arquivo enumerando as linhas em duas colunas."""
    create_line()
    try:
        with open(file_name, "r", encoding="utf-8", errors="ignore") as target:
            for number, line in enumerate(target, start=1):
                left_column = colorize(yellow, f"{number:>4}")
                right_column = line.strip()
                print(f"{left_column} | {right_column}")
        
        create_line()
        print(
            f"Displaying file: {colorize(red, file_name)} "
            f"| Size {get_size(file_name):.2f}Kb"
        )

    except FileNotFoundError:
        print(
            f"{colorize(red, 'ERROR')}: The file {colorize(blue, file_name)} was not found."
        )
    finally:
        create_line()


def create_arc(file_name):
    file_path = Path(file_name)

    try:
        if file_path.is_file():
            create_line()
            print(f"File {colorize(magenta, file_name)} already exists.")
            create_line()
        else:
            file_path.touch()
            create_line()
            print(f"{colorize(green, file_name)} created successfully.")
            create_line()
    except PermissionError:
        create_line()
        print(
            f"{colorize(red, 'ERRO')}: Permission denied to modify "
            f"'{colorize(green, file_name)}'."
        )
        create_line()


def search_lines(word, file_name):
    """Procura e exibe as linhas com a palavra ou frase em duas colunas."""
    if not Path(file_name).is_file():
        print(f"File '{colorize(red, file_name)}' not found.")
        return

    create_line()
    found = False
    with open(file_name, "r", encoding="utf-8", errors="ignore") as target:
        for number, line in enumerate(target, start=1):
            if word in line:
                found = True
                # Destacar a palavra
                highlighted_line = ""
                parts = line.split(word)
                for i, part in enumerate(parts):
                    highlighted_line += part
                    if i < len(parts) - 1:
                        highlighted_line += colorize(green, word)
                
                left_column = colorize(blue, f"{number:>4}")
                right_column = highlighted_line.strip()
                print(f"{left_column} | {right_column}")

    if not found:
        create_line()
        print(
            f"No matches found for '{colorize(red, word)}' in {colorize(blue, file_name)}."
        )
        create_line()
    else:
        create_line()
        print(
            f"Displayed lines with '{colorize(green, word)}' from file {colorize(blue, file_name)}"
        )
        create_line()


def swap_this(line_num, word, new_word, file_name):
    """Troca a palavra ou frase em uma linha especifica do arquivo"""
    try:
        with open(file_name, "r") as target:
            lines = target.readlines()
            lines[line_num - 1] = lines[line_num - 1].replace(word, new_word)

        with open(file_name, "w") as target:
            target.writelines(lines)
    except PermissionError:
        create_line()
        print(
            f'{colorize(red, "Error")}: Permission denied to modify '
            f"'{colorize(green, file_name)}'."
        )
        create_line()


def delete_line(line_num, file_name):
    """Deleta uma linha especifica do arquivo"""
    try:
        with open(file_name, "r") as target:
            lines = target.readlines()

        if line_num > len(lines) or line_num < 1:
            create_line()
            print(
                f"The line {colorize(red, line_num)} does not exist in the file "
                f"{colorize(blue, file_name)}"
            )
            create_line()
            return

        lines.pop(line_num - 1)

        with open(file_name, "w") as target:
            target.writelines(lines)
        create_line()
        print(
            f"Line {colorize(red, line_num)} "
            f"successfully deleted from file {colorize(blue, file_name)}"
        )
        create_line()

    except FileNotFoundError:
        create_line()
        print(f"{colorize(red, 'ERRO')}: File '{file_name}' not found.")
        create_line()
    except PermissionError:
        create_line()
        print(
            f"{colorize(red, 'ERRO')}: Permission denied to modify "
            f"'{colorize(green, file_name)}'."
        )
        create_line()
    except Exception as e:
        create_line()
        print(f"{colorize(red, "An unexpected error occurred")}: {e}")
        create_line()


def add_line(line_num, new_line, file_name):
    """Adiciona uma linha ao arquivo"""
    try:
        with open(file_name, "r") as target:
            lines = target.readlines()

        if line_num > len(lines) + 1 or line_num < 1:
            create_line()
            print(f"You cannot add the line at position {line_num}.")
            create_line()
            return

        for i, new_line in enumerate(new_line):
            lines.insert(line_num - 1 + i, new_line + "\n")

        with open(file_name, "w") as target:
            target.writelines(lines)
        create_line()
        print(
            f"A line has been added at position {colorize(red, line_num)} "
            f"file position {colorize(blue, file_name)}."
        )
        create_line()
    except:
        create_line()
        print(
            f"{colorize(red, "ERROR")}: "
            f"Could not add {colorize(red, new_line)} "
            f"to file {colorize(green, file_name)}"
        )
        create_line()


def comment_line(line_num, comment, file_name):
    with open(file_name, "r") as file:
        lines = file.readlines()

    for i in range(len(lines)):
        if i == line_num - 1:
            lines[i] = comment + lines[i]

    with open(file_name, "w") as file:
        file.writelines(lines)



def create_dir(dir_name):
    try:
        if not os.path.exists(dir_name):
            os.makedirs(dir_name)
            create_line()
            print(f"'{colorize(green, dir_name)}' directory created successfully.")
            create_line()
        else:
            create_line()
            print(f"'{colorize(red, dir_name)}' directory already exists.")
            create_line()
    except PermissionError:
        create_line()
        print(
            f"{colorize(red, 'ERRO')}: Permission denied to modify "
            f"'{colorize(green, dir_name)}'."
        )
        create_line()


def delete_dir(dir_name):
    try:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            create_line()
            print(f"'{colorize(green, dir_name)}' directory deleted successfully.")
            create_line()
        else:
            create_line()
            print(f"'{colorize(red, dir_name)}' directory does not exist.")
            create_line()
    except PermissionError:
        create_line()
        print(
            f"{colorize(red, 'ERRO')}: Permission denied to modify "
            f"'{colorize(green, dir_name)}'."
        )
        create_line()


def add_args(parser, arg_a, arg_b, args, types, meta, helps):
    return parser.add_argument(
        arg_a,
        arg_b,
        nargs=args,
        type=types,
        metavar=meta,
        help=helps,
    )

def main():
    parser = argparse.ArgumentParser()

    add_args(parser, "--read", "-r", None, None, "<file_name>", "Displays the file enumerating the lines.")

    add_args(parser, "--create", "-c", None, str, "<file_name>", "Creates an empty file.")

    add_args(parser, "--search", "-s", 2, None, "<word> To do this use \"New phrase\"", "Search and show only lines that contain the keyword.")

    add_args(parser, "--swap", "-sw", 4, None, ("<line_number>", "<word>", "<new_world>", "file_name"), "Replaces one word with another on a specific line in a file.")

    add_args(parser, "--delete", "-d", 2, None, "<line_num> <file_name>", "Delete a specific line from the file")

    add_args(parser, "--add", "-a", 3, None, ("<line_num>", "<new_line>", "<new_line>"), "Add a line to the file at a specific position")

    add_args(parser, "--comment", "-cm", 3, None, ("<line_num>", "<comment>", "<file_name>"), "Adds a comment at the beginning of the line.")

    add_args(parser, "--dir", "-cd", None, None, "<dir_name>", "Create a directory")

    add_args(parser, "--rmdir", "-rd", None, None, "<dir_name>", "Delete a directory")


    args = parser.parse_args()

    if args.read:
        enumerate_lines(args.read)
    if args.create:
        create_arc(args.create)
    if args.search:
        word, file_name = args.search
        search_lines(str(word), file_name)
    if args.swap:
        line_num, word, new_word, file_name = args.swap
        swap_this(int(line_num), str(word), str(new_word), file_name)
    if args.delete:
        line_num, file_name = args.delete
        delete_line(int(line_num), file_name)
    if args.add:
        line_num, new_line, file_name = args.add
        add_line(int(line_num), new_line.split(";"), file_name)
    if args.comment:
        line_num, comment, file_name = args.comment
        comment_line(int(line_num), comment, file_name)
    if args.dir:
        create_dir(args.dir)
    if args.rmdir:
        delete_dir(args.rmdir)


if __name__ == "__main__":
    main()